import axios from 'axios'
import { HtmlService } from '../../../../src/services/html/html.service'
import { HTML_PARSING_CONSTANTS } from '../../../../src/services/html/html.constants'
import type { SimpleDocument, HtmlFetchOptions } from '../../../../src/types/html'

// axios mock
jest.mock('axios')
const mockedAxios = axios as jest.Mocked<typeof axios>

describe('HtmlService', () => {
  let htmlService: HtmlService
  let consoleSpy: {
    log: jest.SpyInstance
    warn: jest.SpyInstance
    error: jest.SpyInstance
  }

  beforeEach(() => {
    htmlService = new HtmlService()
    
    // console Î©îÏÑúÎìúÎì§ Î™®ÌÇπ
    consoleSpy = {
      log: jest.spyOn(console, 'log').mockImplementation(),
      warn: jest.spyOn(console, 'warn').mockImplementation(),
      error: jest.spyOn(console, 'error').mockImplementation()
    }
    
    jest.clearAllMocks()
  })

  afterEach(() => {
    // console spy Î≥µÏõê
    Object.values(consoleSpy).forEach(spy => spy.mockRestore())
  })

  describe('fetchPage', () => {
    const testUrl = 'https://example.com'
    const mockHtml = '<html><body>Test Content</body></html>'

    test('ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÌéòÏù¥ÏßÄÎ•º ÏàòÏßëÌï¥Ïïº Ìï®', async () => {
      mockedAxios.get.mockResolvedValue({ data: mockHtml })

      const result = await htmlService.fetchPage(testUrl)

      expect(result).toBe(mockHtml)
      expect(mockedAxios.get).toHaveBeenCalledWith(testUrl, {
        timeout: HTML_PARSING_CONSTANTS.REQUEST_TIMEOUT,
        headers: {
          'User-Agent': HTML_PARSING_CONSTANTS.USER_AGENT
        }
      })
    })

    test('Ïû¨ÏãúÎèÑ ÌõÑ ÏÑ±Í≥µÌï¥Ïïº Ìï®', async () => {
      // delay Î©îÏÑúÎìúÎ•º Î™®ÌÇπ
      jest.spyOn(htmlService as any, 'delay').mockResolvedValue(undefined)
      
      mockedAxios.get
        .mockRejectedValueOnce(new Error('Network error'))
        .mockResolvedValueOnce({ data: mockHtml })

      const result = await htmlService.fetchPage(testUrl, { retryCount: 2 })

      expect(result).toBe(mockHtml)
      expect(mockedAxios.get).toHaveBeenCalledTimes(2)
    })
  })

  describe('extractText - Generic Parser', () => {
    const testUrl = 'https://example.com'

    test('ÏùºÎ∞ò HTMLÏóêÏÑú generic parser ÏÇ¨Ïö©', () => {
      const html = `
        <html>
          <head><title>Test Page</title></head>
          <body>
            <main>Main content here</main>
          </body>
        </html>
      `

      const result = htmlService.extractText(html, testUrl)

      expect(result.url).toBe(testUrl)
      expect(result.title).toBe('Test Page')
      expect(result.content).toBe('Main content here')
      expect(result.breadcrumb).toEqual([]) // generic parserÎäî breadcrumb ÏóÜÏùå
      expect(result.wordCount).toBeGreaterThan(0)
      expect(result.timestamp).toMatch(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/)
    })

    test('Î∂àÌïÑÏöîÌïú ÌÉúÍ∑∏ Ï†úÍ±∞', () => {
      const html = `
        <html>
          <body>
            <script>alert('remove')</script>
            <style>body { color: red; }</style>
            <nav>Navigation</nav>
            <footer>Footer</footer>
            <main>Clean content</main>
          </body>
        </html>
      `

      const result = htmlService.extractText(html, testUrl)

      expect(result.content).toBe('Clean content')
      expect(result.content).not.toContain('alert')
      expect(result.content).not.toContain('Navigation')
      expect(result.content).not.toContain('Footer')
    })
  })

  describe('extractText - Oopy Parser', () => {
    const oopyUrl = 'https://help.pro.sixshop.com.oopy.io/design'

    test('Oopy ÏÇ¨Ïù¥Ìä∏ÏóêÏÑú breadcrumbÍ≥º content Î∂ÑÎ¶¨', () => {
      const html = `
        <html>
          <head><title>Oopy Page</title></head>
          <body>
            <p>Home / Category</p>
            <p>Search</p>
            <p>After search content</p>
          </body>
        </html>
      `

      const result = htmlService.extractText(html, oopyUrl)

      expect(result.url).toBe(oopyUrl)
      expect(result.title).toBe('Oopy Page')
      expect(result.content).toBe('After search content')
      expect(result.breadcrumb).toEqual(['Home', 'Category'])
    })

    test('Search ÌÇ§ÏõåÎìúÍ∞Ä ÏóÜÏùÑ Îïå', () => {
      const html = `
        <html>
          <body>
            <p>Content without search</p>
          </body>
        </html>
      `

      const result = htmlService.extractText(html, oopyUrl)

      expect(result.content).toBe('')
      expect(result.breadcrumb).toEqual([])
    })
  })

  describe('extractFromUrl', () => {
    test('Generic parser - URLÏóêÏÑú Î¨∏ÏÑú Ï∂îÏ∂ú', async () => {
      const testUrl = 'https://example.com'
      const mockHtml = `
        <html>
          <head><title>Test Page</title></head>
          <body><main>Main content</main></body>
        </html>
      `

      mockedAxios.get.mockResolvedValue({ data: mockHtml })

      const result = await htmlService.extractFromUrl(testUrl)

      expect(result).toMatchObject({
        url: testUrl,
        title: 'Test Page',
        content: 'Main content',
        breadcrumb: []
      })
    })

    test('Oopy parser - URLÏóêÏÑú Î¨∏ÏÑú Ï∂îÏ∂ú', async () => {
      const oopyUrl = 'https://help.pro.sixshop.com.oopy.io/design'
      const mockHtml = `
        <html>
          <head><title>Oopy Page</title></head>
          <body>
            <p>Home / Guide</p>
            <p>Search</p>
            <p>Oopy content</p>
          </body>
        </html>
      `

      mockedAxios.get.mockResolvedValue({ data: mockHtml })

      const result = await htmlService.extractFromUrl(oopyUrl)

      expect(result).toMatchObject({
        url: oopyUrl,
        title: 'Oopy Page',
        content: 'Oopy content',
        breadcrumb: ['Home', 'Guide']
      })
    })

    test('ÌéòÏù¥ÏßÄ ÏàòÏßë Ïã§Ìå® Ïãú ÏóêÎü¨', async () => {
      const testUrl = 'https://example.com'
      jest.spyOn(htmlService as any, 'delay').mockResolvedValue(undefined)
      
      mockedAxios.get.mockRejectedValue(new Error('Network error'))

      await expect(htmlService.extractFromUrl(testUrl))
        .rejects.toThrow('URL Î¨∏ÏÑú Ï∂îÏ∂úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§')
    })
  })

  describe('displayResult', () => {
    test('Í≤∞Í≥ºÎ•º Ïò¨Î∞îÎ•∏ ÌòïÏãùÏúºÎ°ú Ï∂úÎ†•Ìï¥Ïïº Ìï®', () => {
      const document: SimpleDocument = {
        url: 'https://example.com',
        title: 'Test Document',
        content: 'Test content',
        wordCount: 12,
        breadcrumb: ['Home', 'Category'],
        timestamp: '2023-01-01T00:00:00.000Z'
      }

      htmlService.displayResult(document)

      expect(consoleSpy.log).toHaveBeenCalledWith('\n' + '='.repeat(80))
      expect(consoleSpy.log).toHaveBeenCalledWith('üìÑ HTML ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú Í≤∞Í≥º')
      expect(consoleSpy.log).toHaveBeenCalledWith(
        expect.stringContaining('Ï†úÎ™©: Test Document')
      )
      expect(consoleSpy.log).toHaveBeenCalledWith(
        expect.stringContaining('breadcrumb: ["Home", "Category"]')
      )
    })
  })

  describe('parseUrl (ÏÉàÎ°úÏö¥ ÌïòÏù¥Î∏åÎ¶¨Îìú ÌÅ¨Î°§ÎßÅ)', () => {
    test('Ï†ïÏ†Å HTML - ÌÜ†Í∏ÄÏù¥ ÏóÜÏùÄ ÏÇ¨Ïù¥Ìä∏', async () => {
      const testUrl = 'https://example.com'
      const html = '<html><body><p>ÏùºÎ∞ò ÏΩòÌÖêÏ∏†</p></body></html>'
      
      mockedAxios.get.mockResolvedValue({ data: html })
      
      const result = await htmlService.parseUrl(testUrl)
      
      expect(result.url).toBe(testUrl)
      expect(result.content).toBe('ÏùºÎ∞ò ÏΩòÌÖêÏ∏†')
    })

    test('ÎèôÏ†Å HTML - oopy ÌÜ†Í∏Ä ÏÇ¨Ïù¥Ìä∏ (Î™®ÌÇπ)', async () => {
      const oopyUrl = 'https://help.pro.sixshop.com.oopy.io/design'
      const htmlWithToggles = `
        <html><body>
          <div class="notion-toggle-block">
            <div role="button" aria-label="ÌéºÏπòÍ∏∞">ÌÜ†Í∏Ä Ï†úÎ™©</div>
          </div>
          ÌôàSearchÏ†ïÏ†Å ÏΩòÌÖêÏ∏†
        </body></html>
      `
      
      mockedAxios.get.mockResolvedValue({ data: htmlWithToggles })
      
      // Î∏åÎùºÏö∞Ï†Ä Í∏∞Îä• Î™®ÌÇπ
      const mockInitBrowser = jest.fn()
      const mockFetchDynamicContent = jest.fn().mockResolvedValue('ÌôàSearchÌÜ†Í∏Ä ÏΩòÌÖêÏ∏†Í∞Ä Ìè¨Ìï®Îêú ÎèôÏ†Å ÏΩòÌÖêÏ∏†')
      
      // HtmlService ÎÇ¥Î∂Ä Î©îÏÑúÎìú Î™®ÌÇπ
      jest.spyOn(htmlService as any, 'initBrowser').mockImplementation(mockInitBrowser)
      jest.spyOn(htmlService as any, 'fetchDynamicContent').mockImplementation(mockFetchDynamicContent)
      
      const result = await htmlService.parseUrl(oopyUrl)
      
      expect(result.url).toBe(oopyUrl)
      expect(result.content).toContain('ÎèôÏ†Å ÏΩòÌÖêÏ∏†')
      expect(mockFetchDynamicContent).toHaveBeenCalledWith(
        oopyUrl,
        expect.any(Function) // ÌÜ†Í∏Ä ÌôïÏû• Ìï®Ïàò
      )
    })

    test('ÎèôÏ†Å ÌÅ¨Î°§ÎßÅ Ïã§Ìå® Ïãú fallbackÎ°ú Ï†ïÏ†Å ÌååÏã± ÏÇ¨Ïö©', async () => {
      const oopyUrl = 'https://help.pro.sixshop.com.oopy.io/design'
      const htmlWithToggles = `
        <html><body>
          <div class="notion-toggle-block">
            <div role="button" aria-label="ÌéºÏπòÍ∏∞">ÌÜ†Í∏Ä Ï†úÎ™©</div>
          </div>
          ÌôàSearchÏ†ïÏ†Å ÏΩòÌÖêÏ∏†
        </body></html>
      `
      
      mockedAxios.get.mockResolvedValue({ data: htmlWithToggles })
      
      // Î∏åÎùºÏö∞Ï†Ä Í∏∞Îä• Ïã§Ìå® Î™®ÌÇπ
      const mockFetchDynamicContent = jest.fn().mockRejectedValue(new Error('Î∏åÎùºÏö∞Ï†Ä Ïò§Î•ò'))
      jest.spyOn(htmlService as any, 'fetchDynamicContent').mockImplementation(mockFetchDynamicContent)
      
      const result = await htmlService.parseUrl(oopyUrl)
      
      expect(result.url).toBe(oopyUrl)
      expect(result.content).toBe('Ï†ïÏ†Å ÏΩòÌÖêÏ∏†') // fallbackÎ°ú Ï†ïÏ†Å ÏΩòÌÖêÏ∏†
      expect(consoleSpy.warn).toHaveBeenCalledWith(
        expect.stringContaining('Î∏åÎùºÏö∞Ï†Ä ÌÅ¨Î°§ÎßÅ Ïã§Ìå®'),
        expect.any(Error)
      )
    })
  })

  describe('ÌÜµÌï© ÌÖåÏä§Ìä∏', () => {
    test('Î≥µÏû°Ìïú HTML Ï≤òÎ¶¨ - Generic Parser', async () => {
      const testUrl = 'https://example.com'
      const complexHtml = `
        <!DOCTYPE html>
        <html>
          <head>
            <title>Î≥µÏû°Ìïú ÌéòÏù¥ÏßÄ</title>
            <style>body { margin: 0; }</style>
          </head>
          <body>
            <nav>ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò</nav>
            <main>
              <h1>Î©îÏù∏ Ï†úÎ™©</h1>
              <p>Î©îÏù∏ ÏΩòÌÖêÏ∏†ÏûÖÎãàÎã§.</p>
            </main>
            <footer>Ìë∏ÌÑ∞</footer>
            <script>console.log('script');</script>
          </body>
        </html>
      `

      mockedAxios.get.mockResolvedValue({ data: complexHtml })

      const result = await htmlService.extractFromUrl(testUrl)

      expect(result.title).toBe('Î≥µÏû°Ìïú ÌéòÏù¥ÏßÄ')
      expect(result.content).toContain('Î©îÏù∏ ÏΩòÌÖêÏ∏†')
      expect(result.content).not.toContain('ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò')
      expect(result.content).not.toContain('Ìë∏ÌÑ∞')
      expect(result.content).not.toContain('script')
      expect(result.breadcrumb).toEqual([])
    })
  })

  describe('Ïª§Ïä§ÌÖÄ URL Ï∂îÏ∂ú', () => {
    test('og:urlÏù¥ ÏûàÏùÑ Îïå Ïª§Ïä§ÌÖÄ URL ÏÇ¨Ïö©', async () => {
      const testUrl = 'https://internal-url.oopy.io/uuid-123'
      const htmlWithOgUrl = `
        <html>
          <head>
            <title>ÌÖåÏä§Ìä∏ ÌéòÏù¥ÏßÄ</title>
            <meta property="og:url" content="https://help.pro.sixshop.com/design/products">
          </head>
          <body>
            Ìôà / ÎîîÏûêÏù∏Search
            Ïª§Ïä§ÌÖÄ ÎèÑÎ©îÏù∏ Ï†ÅÏö©Îêú ÌéòÏù¥ÏßÄÏûÖÎãàÎã§.
          </body>
        </html>
      `

      mockedAxios.get.mockResolvedValue({ data: htmlWithOgUrl })

      const result = await htmlService.parseUrl(testUrl)

      expect(result.url).toBe('https://help.pro.sixshop.com/design/products')
      expect(result.title).toBe('ÌÖåÏä§Ìä∏ ÌéòÏù¥ÏßÄ')
    })

    test('og:urlÏù¥ ÏóÜÏùÑ Îïå ÏõêÎ≥∏ URL ÏÇ¨Ïö©', async () => {
      const testUrl = 'https://help.pro.sixshop.com/normal-page'
      const normalHtml = `
        <html>
          <head><title>ÏùºÎ∞ò ÌéòÏù¥ÏßÄ</title></head>
          <body>
            ÌôàSearch
            ÏùºÎ∞ò ÌéòÏù¥ÏßÄÏûÖÎãàÎã§.
          </body>
        </html>
      `

      mockedAxios.get.mockResolvedValue({ data: normalHtml })

      const result = await htmlService.parseUrl(testUrl)

      expect(result.url).toBe(testUrl)
      expect(result.title).toBe('ÏùºÎ∞ò ÌéòÏù¥ÏßÄ')
    })

    test('ÏûòÎ™ªÎêú ÌòïÏãùÏùò og:urlÏùÄ Î¨¥Ïãú', async () => {
      const testUrl = 'https://example.com/test'
      const malformedHtml = `
        <html>
          <head>
            <title>ÌÖåÏä§Ìä∏</title>
            <meta property="og:url" content="">
          </head>
          <body>ÌôàSearchÌÖåÏä§Ìä∏</body>
        </html>
      `

      mockedAxios.get.mockResolvedValue({ data: malformedHtml })

      const result = await htmlService.parseUrl(testUrl)

      expect(result.url).toBe(testUrl)
    })
  })
})